var search_data = {"index":{"searchIndex":["ability","admincontroller","adminhelper","applicationcontroller","helper","applicationhelper","character","vicevalidator","virtuevalidator","characterscontroller","charactershelper","chronicle","chroniclescontroller","chronicleshelper","clique","cliquescontroller","cliqueshelper","comment","commenthelper","commentscontroller","ideologiescontroller","ideologieshelper","ideology","nature","servicescontroller","serviceshelper","splat","subnature","uniqueinchroniclevalidator","user","change_chronicle()","change_chronicle()","create()","create()","create()","create()","create()","destroy()","destroy()","destroy()","destroy()","destroy()","dot_format()","edit()","edit()","edit()","edit()","ensure_logged_in()","expire_cache()","has_totem?()","help()","index()","index()","index()","index()","is_changeling?()","is_geist?()","is_hunter?()","is_known_to_user?()","is_mage?()","is_mortal?()","is_promethean?()","is_vampire?()","is_werewolf?()","known_to()","known_to()","li_selected_if()","list_for_nature()","manage()","new()","new()","new()","new()","new()","new()","obsidian_bio()","obsidian_connect()","obsidian_description()","obsidian_disconnect()","obsidian_enabled?()","preview()","save_notes()","selected_chronicle_id()","shapeshift()","show()","show()","show()","show()","show_background_to_user?()","show_clique_to_user?()","show_crunch_to_user?()","show_deeds_to_user?()","show_description_to_user?()","show_experience_to_user?()","show_ideology_to_user?()","show_name_to_user?()","show_nature_to_user?()","show_notes_to_user?()","super_user?()","to_param()","to_param()","to_param()","to_param()","update()","update()","update()","update()","update_chronicle()","update_nature()","update_splat()","validate_each()","validate_each()","validate_each()","readme_for_app"],"longSearchIndex":["ability","admincontroller","adminhelper","applicationcontroller","applicationcontroller::helper","applicationhelper","character","character::vicevalidator","character::virtuevalidator","characterscontroller","charactershelper","chronicle","chroniclescontroller","chronicleshelper","clique","cliquescontroller","cliqueshelper","comment","commenthelper","commentscontroller","ideologiescontroller","ideologieshelper","ideology","nature","servicescontroller","serviceshelper","splat","subnature","uniqueinchroniclevalidator","user","characterscontroller#change_chronicle()","cliquescontroller#change_chronicle()","characterscontroller#create()","chroniclescontroller#create()","cliquescontroller#create()","commentscontroller#create()","ideologiescontroller#create()","characterscontroller#destroy()","chroniclescontroller#destroy()","cliquescontroller#destroy()","commentscontroller#destroy()","ideologiescontroller#destroy()","charactershelper#dot_format()","characterscontroller#edit()","chroniclescontroller#edit()","cliquescontroller#edit()","ideologiescontroller#edit()","servicescontroller#ensure_logged_in()","applicationcontroller#expire_cache()","clique#has_totem?()","applicationcontroller#help()","characterscontroller#index()","chroniclescontroller#index()","cliquescontroller#index()","ideologiescontroller#index()","character#is_changeling?()","character#is_geist?()","character#is_hunter?()","clique#is_known_to_user?()","character#is_mage?()","character#is_mortal?()","character#is_promethean?()","character#is_vampire?()","character#is_werewolf?()","character::known_to()","clique::known_to()","applicationhelper#li_selected_if()","subnature::list_for_nature()","admincontroller#manage()","ability::new()","characterscontroller#new()","chroniclescontroller#new()","cliquescontroller#new()","commentscontroller#new()","ideologiescontroller#new()","character#obsidian_bio()","servicescontroller#obsidian_connect()","character#obsidian_description()","servicescontroller#obsidian_disconnect()","applicationcontroller#obsidian_enabled?()","characterscontroller#preview()","characterscontroller#save_notes()","applicationhelper#selected_chronicle_id()","characterscontroller#shapeshift()","characterscontroller#show()","chroniclescontroller#show()","cliquescontroller#show()","ideologiescontroller#show()","character#show_background_to_user?()","character#show_clique_to_user?()","character#show_crunch_to_user?()","character#show_deeds_to_user?()","character#show_description_to_user?()","character#show_experience_to_user?()","character#show_ideology_to_user?()","character#show_name_to_user?()","character#show_nature_to_user?()","character#show_notes_to_user?()","user#super_user?()","character#to_param()","chronicle#to_param()","clique#to_param()","ideology#to_param()","characterscontroller#update()","chroniclescontroller#update()","cliquescontroller#update()","ideologiescontroller#update()","characterscontroller#update_chronicle()","characterscontroller#update_nature()","characterscontroller#update_splat()","character::vicevalidator#validate_each()","character::virtuevalidator#validate_each()","uniqueinchroniclevalidator#validate_each()",""],"info":[["Ability","","Ability.html","","<p>This class handles authorization via the CanCan gem. The only real contents\nof it is Ability.initialize(user) …\n"],["AdminController","","AdminController.html","","<p>The admin controller will handle administrative functions, such as managing\nusers with admin access. …\n"],["AdminHelper","","AdminHelper.html","","<p>Admin helper module\n"],["ApplicationController","","ApplicationController.html","","<p>Filters added to this controller apply to all controllers in the\napplication. Likewise, all the methods …\n"],["ApplicationController::Helper","","ApplicationController/Helper.html","","<p>exists only to allow access to helper methods\n"],["ApplicationHelper","","ApplicationHelper.html","","<p>Application-wide helper module\n"],["Character","","Character.html","","<p>The basic building block of personae, the character class represents a\nWorld of Darkness character.  …\n"],["Character::ViceValidator","","Character/ViceValidator.html","","<p>Creates a validator for Character.vice . Valid vices are ‘Envy’,\n‘Gluttony’, ‘Greed’, ‘Lust’ ‘Sloth’, …\n"],["Character::VirtueValidator","","Character/VirtueValidator.html","","<p>Creates a validator for Character.virtue . Valid virtues are ‘Charity’,\n‘Faith’, ‘Fortitude’ ‘Hope’, …\n"],["CharactersController","","CharactersController.html","","<p>Controller for character actions: show/create/edit/etc\n"],["CharactersHelper","","CharactersHelper.html","","<p>Character helper module\n"],["Chronicle","","Chronicle.html","","<p>Chronicles contain characters and cliques – presumably ideologies and\nnatures will be static throughout …\n"],["ChroniclesController","","ChroniclesController.html","","<p>Controller for chronicle actions: show/create/edit/etc\n"],["ChroniclesHelper","","ChroniclesHelper.html","","<p>Chronicle helper module\n"],["Clique","","Clique.html","","<p>Cliques are close-knit social groups typically consisting of three to ten\nmembers. Characters may belong …\n"],["CliquesController","","CliquesController.html","","<p>Controller for clique actions: show/create/edit/etc\n"],["CliquesHelper","","CliquesHelper.html","","<p>Clique helper module\n"],["Comment","","Comment.html","","<p>Implements basic commenting support\n"],["CommentHelper","","CommentHelper.html","","<p>Comment helper module\n"],["CommentsController","","CommentsController.html","","<p>Controller for comment actions: create/edit/destroy\n"],["IdeologiesController","","IdeologiesController.html","","<p>Controller for ideology actions: show/create/edit/etc\n"],["IdeologiesHelper","","IdeologiesHelper.html","","<p>Ideologies helper module\n"],["Ideology","","Ideology.html","","<p>Ideologies are loose social organizations that are typically\nworld-spanning. Obviously, their members …\n"],["Nature","","Nature.html","","<p>Represents the inborn tendencies and attitudes of a supernatural template.\n"],["ServicesController","","ServicesController.html","","<p>The services controller will handle enabling and disabling external\nservices such as Obsidian Portal …\n"],["ServicesHelper","","ServicesHelper.html","","<p>helper module for services controller\n"],["Splat","","Splat.html","","<p>Represents a splat, which is to say a supernatural template in the World of\nDarkness. While technically …\n"],["Subnature","","Subnature.html","","<p>Subnature is only meaningful to the Changeling splat, and is included to\nrepresent their kiths. No other …\n"],["UniqueInChronicleValidator","","UniqueInChronicleValidator.html","","<p>Creates a validator which ensures only one Character or Clique may have the\nsame name within a Chronicle …\n"],["User","","User.html","","<p>Contains user-specific data. Which characters are theirs, which cliques and\nchromicles they’ve created, …\n"],["change_chronicle","CharactersController","CharactersController.html#method-i-change_chronicle","()","<p>POST /characters/change_chronicle\n"],["change_chronicle","CliquesController","CliquesController.html#method-i-change_chronicle","()","<p>POST /cliques/change_chronicle\n"],["create","CharactersController","CharactersController.html#method-i-create","()","<p>POST /characters POST /characters.xml\n"],["create","ChroniclesController","ChroniclesController.html#method-i-create","()","<p>POST /chronicles POST /chronicles.xml\n"],["create","CliquesController","CliquesController.html#method-i-create","()","<p>POST /cliques POST /cliques.xml\n"],["create","CommentsController","CommentsController.html#method-i-create","()","<p>POST /characters/comments POST /characters/comments\n"],["create","IdeologiesController","IdeologiesController.html#method-i-create","()","<p>POST /ideologies POST /ideologies.xml\n"],["destroy","CharactersController","CharactersController.html#method-i-destroy","()","<p>DELETE /characters/1 DELETE /characters/1.xml\n"],["destroy","ChroniclesController","ChroniclesController.html#method-i-destroy","()","<p>DELETE /chronicles/1 DELETE /chronicles/1.xml\n"],["destroy","CliquesController","CliquesController.html#method-i-destroy","()","<p>DELETE /cliques/1 DELETE /cliques/1.xml\n"],["destroy","CommentsController","CommentsController.html#method-i-destroy","()","<p>DELETE /characters/comments/1 DELETE /characters/comments/1.xml\n"],["destroy","IdeologiesController","IdeologiesController.html#method-i-destroy","()","<p>DELETE /ideologies/1 DELETE /ideologies/1.xml\n"],["dot_format","CharactersHelper","CharactersHelper.html#method-i-dot_format","(rating)","<p>breaks strings of •s into groups of 5 for readability\n"],["edit","CharactersController","CharactersController.html#method-i-edit","()","<p>GET /characters/1/edit\n"],["edit","ChroniclesController","ChroniclesController.html#method-i-edit","()","<p>GET /chronicles/1/edit\n"],["edit","CliquesController","CliquesController.html#method-i-edit","()","<p>GET /cliques/1/edit\n"],["edit","IdeologiesController","IdeologiesController.html#method-i-edit","()","<p>GET /ideologies/1/edit\n"],["ensure_logged_in","ServicesController","ServicesController.html#method-i-ensure_logged_in","()","<p>due to some cancan quirks, this check stops users that aren’t logged in\nfrom connecting or disconnecting …\n"],["expire_cache","ApplicationController","ApplicationController.html#method-i-expire_cache","()","<p>Includes header tags that instruct browsers not to cache the page. Ajax\nmethods that update pages (eg: …\n"],["has_totem?","Clique","Clique.html#method-i-has_totem-3F","()","<p>Returns true if the clique has a werewolf member. Used to determine if the\nclique’s totem field should …\n"],["help","ApplicationController","ApplicationController.html#method-i-help","()","<p>allows access to helper methods. example: help.selected_chronicle_id(user,\nsession)\n"],["index","CharactersController","CharactersController.html#method-i-index","()","<p>GET /characters GET /characters.xml\n"],["index","ChroniclesController","ChroniclesController.html#method-i-index","()","<p>GET /chronicles GET /chronicles.xml\n"],["index","CliquesController","CliquesController.html#method-i-index","()","<p>GET /cliques GET /cliques.xml\n"],["index","IdeologiesController","IdeologiesController.html#method-i-index","()","<p>GET /ideologies GET /ideologies.xml\n"],["is_changeling?","Character","Character.html#method-i-is_changeling-3F","()","<p>Returns true if the character is a changeling.\n"],["is_geist?","Character","Character.html#method-i-is_geist-3F","()","<p>Returns true if the character is a geist.\n"],["is_hunter?","Character","Character.html#method-i-is_hunter-3F","()","<p>Returns true if the character is a hunter (close enough).\n"],["is_known_to_user?","Clique","Clique.html#method-i-is_known_to_user-3F","(user)","<p>Returns true if the user can see any member of the clique who they also can\nsee which clique they belong …\n"],["is_mage?","Character","Character.html#method-i-is_mage-3F","()","<p>Returns true if the character is a mage.\n"],["is_mortal?","Character","Character.html#method-i-is_mortal-3F","()","<p>Returns true if the character is a mortal or a hunter (close enough).\n"],["is_promethean?","Character","Character.html#method-i-is_promethean-3F","()","<p>Returns true if the character is a promethean.\n"],["is_vampire?","Character","Character.html#method-i-is_vampire-3F","()","<p>Returns true if the character is a vampire.\n"],["is_werewolf?","Character","Character.html#method-i-is_werewolf-3F","()","<p>Returns true if the character is a werewolf.\n"],["known_to","Character","Character.html#method-c-known_to","(user, selected_chronicle=user.selected_chronicle.id)","<p>List characters known to the given user\n"],["known_to","Clique","Clique.html#method-c-known_to","(user, chronicle_id=user.selected_chronicle.id)","<p>List cliques konwn to the given user if the user provided is nil, create a\nnew, temporary user as a base …\n"],["li_selected_if","ApplicationHelper","ApplicationHelper.html#method-i-li_selected_if","(condition, attributes = {}, &block)","<p>creates a li with class=“selected” if the condition is true\n"],["list_for_nature","Subnature","Subnature.html#method-c-list_for_nature","(nature)","<p>List subnatures for a given nature\n"],["manage","AdminController","AdminController.html#method-i-manage","()","<p>GET /admin/manage GET /admin/manage.xml POST /admin/manage\n"],["new","Ability","Ability.html#method-c-new","(user)","<p>Contains the authorization permissions map for user objects. As of now, the\nonly two roles are admin …\n"],["new","CharactersController","CharactersController.html#method-i-new","()","<p>GET /characters/new GET /characters/new.xml\n"],["new","ChroniclesController","ChroniclesController.html#method-i-new","()","<p>GET /chronicles/new GET /chronicles/new.xml\n"],["new","CliquesController","CliquesController.html#method-i-new","()","<p>GET /cliques/new GET /cliques/new.xml\n"],["new","CommentsController","CommentsController.html#method-i-new","()","<p>GET /characters/comments/new GET /characters/comments/new.xml\n"],["new","IdeologiesController","IdeologiesController.html#method-i-new","()","<p>GET /ideologies/new GET /ideologies/new.xml\n"],["obsidian_bio","Character","Character.html#method-i-obsidian_bio","()","<p>Returns what Obsidian Portal calls the character’s bio. In personae terms,\nthat is the character’s description …\n"],["obsidian_connect","ServicesController","ServicesController.html#method-i-obsidian_connect","()","<p>POST /services/obsidian_connect\n"],["obsidian_description","Character","Character.html#method-i-obsidian_description","()","<p>Returns what Obsidian Portal calls the character’s description, which is\nall of the mechanical bits. …\n"],["obsidian_disconnect","ServicesController","ServicesController.html#method-i-obsidian_disconnect","()","<p>POST /services/obsidian_disconnect\n"],["obsidian_enabled?","ApplicationController","ApplicationController.html#method-i-obsidian_enabled-3F","()","<p>returns true if obsidian portal integration is running via MageHand and the\nuser has linked his/her account …\n"],["preview","CharactersController","CharactersController.html#method-i-preview","()","<p>GET /characters/preview\n"],["save_notes","CharactersController","CharactersController.html#method-i-save_notes","()","<p>PUT /characters/1/save_notes\n<p>this will animate saving the notes on a character’s page\n"],["selected_chronicle_id","ApplicationHelper","ApplicationHelper.html#method-i-selected_chronicle_id","(user, session)","<p>since users who aren’t logged in won’t have a current_user we need to stick\na value in their session …\n"],["shapeshift","CharactersController","CharactersController.html#method-i-shapeshift","()","<p>POST /characters/shapeshift\n"],["show","CharactersController","CharactersController.html#method-i-show","()","<p>GET /characters/1 GET /characters/1.xml\n"],["show","ChroniclesController","ChroniclesController.html#method-i-show","()","<p>GET /chronicles/1 GET /chronicles/1.xml\n"],["show","CliquesController","CliquesController.html#method-i-show","()","<p>GET /cliques/1 GET /cliques/1.xml\n"],["show","IdeologiesController","IdeologiesController.html#method-i-show","()","<p>GET /ideologies/1 GET /ideologies/1.xml\n"],["show_background_to_user?","Character","Character.html#method-i-show_background_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\nbackground. Defaults to false. …\n"],["show_clique_to_user?","Character","Character.html#method-i-show_clique_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\nclique. Defaults to false.\n"],["show_crunch_to_user?","Character","Character.html#method-i-show_crunch_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s cruch\n(Strength, Drive, powers, …\n"],["show_deeds_to_user?","Character","Character.html#method-i-show_deeds_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\ndeeds. Defaults to true.\n"],["show_description_to_user?","Character","Character.html#method-i-show_description_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\ndescription. Defaults to false. …\n"],["show_experience_to_user?","Character","Character.html#method-i-show_experience_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\nexperience. Defaults to false. …\n"],["show_ideology_to_user?","Character","Character.html#method-i-show_ideology_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\nideology. Defaults to false.\n"],["show_name_to_user?","Character","Character.html#method-i-show_name_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s name.\nThis is also the check used …\n"],["show_nature_to_user?","Character","Character.html#method-i-show_nature_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\nnature. Defaults to false.\n"],["show_notes_to_user?","Character","Character.html#method-i-show_notes_to_user-3F","(user)","<p>Returns true if the given user has permission to read the character’s\nnotes. Defaults to false.\n"],["super_user?","User","User.html#method-i-super_user-3F","(chronicle)","<p>Returns true if the current user is an admin for the specified chronicle.\n"],["to_param","Character","Character.html#method-i-to_param","()","<p>Show the character’s name in the url\n"],["to_param","Chronicle","Chronicle.html#method-i-to_param","()","<p>Show the chronicle’s name in the url\n"],["to_param","Clique","Clique.html#method-i-to_param","()","<p>Show the clique’s name in the url\n"],["to_param","Ideology","Ideology.html#method-i-to_param","()","<p>Show the ideology’s name in the url\n"],["update","CharactersController","CharactersController.html#method-i-update","()","<p>PUT /characters/1 PUT /characters/1.xml\n<p>this will also sync a character’s sheet to obsidian portal, if …\n"],["update","ChroniclesController","ChroniclesController.html#method-i-update","()","<p>PUT /chronicles/1 PUT /chronicles/1.xml\n"],["update","CliquesController","CliquesController.html#method-i-update","()","<p>PUT /cliques/1 PUT /cliques/1.xml\n"],["update","IdeologiesController","IdeologiesController.html#method-i-update","()","<p>PUT /ideologies/1 PUT /ideologies/1.xml\n"],["update_chronicle","CharactersController","CharactersController.html#method-i-update_chronicle","()","<p>POST /characters/update_chronicle\n"],["update_nature","CharactersController","CharactersController.html#method-i-update_nature","()","<p>POST /characters/update_nature\n"],["update_splat","CharactersController","CharactersController.html#method-i-update_splat","()","<p>POST /characters/update_splat\n"],["validate_each","Character::ViceValidator","Character/ViceValidator.html#method-i-validate_each","(record, attribute, value)","<p>Validates all records passed to it\n"],["validate_each","Character::VirtueValidator","Character/VirtueValidator.html#method-i-validate_each","(record, attribute, value)","<p>Validates all records passed to it\n"],["validate_each","UniqueInChronicleValidator","UniqueInChronicleValidator.html#method-i-validate_each","(record, attribute, value)","<p>Validates all records passed to it\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>License\n<p>Personae is free software: you can redistribute it and/or modify it under\nthe terms of the GNU …\n"]]}}